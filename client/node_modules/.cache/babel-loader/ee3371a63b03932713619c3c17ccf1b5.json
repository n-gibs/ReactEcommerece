{"ast":null,"code":"import { takeEvery, call, put } from 'redux-saga/effects';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from './shop.actions';\nimport ShopActionTypes from './shop.types';\nexport function* fetchCollectionsAsync() {\n  try {\n    const collectionRef = firestore.collection('collections');\n    const snapshot = yield collectionRef.get(); //defer control to saga middleware\n\n    const collectionsMap = yield call(convertCollectionsSnapshotToMap, snapshot);\n    yield put(fetchCollectionsSuccess(collectionsMap));\n  } catch (error) {\n    yield fetchCollectionsFailure(error.message);\n  }\n}\n; //pause when a specific action type\n\nexport function* fetchCollectionsStart() {\n  yield takeEvery(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}\n;","map":{"version":3,"sources":["/Users/nicolegibson/TrainingRepos/clothing-ecomm/src/redux/shop/shop.sagas.js"],"names":["takeEvery","call","put","firestore","convertCollectionsSnapshotToMap","fetchCollectionsSuccess","fetchCollectionsFailure","ShopActionTypes","fetchCollectionsAsync","collectionRef","collection","snapshot","get","collectionsMap","error","message","fetchCollectionsStart","FETCH_COLLECTIONS_START"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,IAApB,EAA0BC,GAA1B,QAAqC,oBAArC;AACA,SAASC,SAAT,EAAoBC,+BAApB,QAA2D,+BAA3D;AAEA,SAASC,uBAAT,EAAkCC,uBAAlC,QAAiE,gBAAjE;AACA,OAAOC,eAAP,MAA4B,cAA5B;AAGA,OAAO,UAAUC,qBAAV,GAAiC;AAEtC,MAAG;AACH,UAAMC,aAAa,GAAGN,SAAS,CAACO,UAAV,CAAqB,aAArB,CAAtB;AACA,UAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB,CAFG,CAGH;;AACA,UAAMC,cAAc,GAAG,MAAMZ,IAAI,CAAEG,+BAAF,EAAmCO,QAAnC,CAAjC;AACA,UAAMT,GAAG,CAACG,uBAAuB,CAACQ,cAAD,CAAxB,CAAT;AACC,GAND,CAMC,OAAOC,KAAP,EAAa;AACZ,UAAOR,uBAAuB,CAACQ,KAAK,CAACC,OAAP,CAA9B;AACD;AACF;AAAA,C,CAED;;AACA,OAAO,UAAUC,qBAAV,GAAkC;AACvC,QAAMhB,SAAS,CACbO,eAAe,CAACU,uBADH,EAEbT,qBAFa,CAAf;AAGD;AAAA","sourcesContent":["import { takeEvery, call, put } from 'redux-saga/effects';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils'\n\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from './shop.actions'\nimport ShopActionTypes from './shop.types';\n\n\nexport function* fetchCollectionsAsync(){\n\n  try{\n  const collectionRef = firestore.collection('collections');\n  const snapshot = yield collectionRef.get();\n  //defer control to saga middleware\n  const collectionsMap = yield call (convertCollectionsSnapshotToMap, snapshot);\n  yield put(fetchCollectionsSuccess(collectionsMap));\n  }catch (error){\n    yield (fetchCollectionsFailure(error.message));\n  }\n};\n\n//pause when a specific action type\nexport function* fetchCollectionsStart() {\n  yield takeEvery(\n    ShopActionTypes.FETCH_COLLECTIONS_START, \n    fetchCollectionsAsync);\n};"]},"metadata":{},"sourceType":"module"}