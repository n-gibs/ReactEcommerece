{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\nimport { signInSuccess, signInFailure, signOutSuccess, signOutFailure, signUpSuccess, signUpFailure, emailSignInStart } from './user.actions';\nimport UserActionTypes from './user.types'; //signin function\n\nexport function* getSnapshotFromUserAuth(userAuth, additionalData) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth, additionalData);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n} ///////GOOGLE SIGNIN///////\n//worker\n\nexport function* signInWithGoogle() {\n  try {\n    //need to access valu returned\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n} //watcher\n\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n} ////////////EMAIL SIGNIN////////////\n//worker\n\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n} //watcher\n\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n} /////////CHECK USER Session//////////\n//worker\n\nexport function* isUserAuthenticaed() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n} //watcher\n\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticaed);\n} ////////SIGNOUT///////////\n//worker\n\nexport function* signOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure(error));\n  }\n} //watcher\n\nexport function* onSignOutStart() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut);\n} /////SIGN UP///////\n//worker\n\nexport function* signUp({\n  payload: {\n    email,\n    password,\n    displayName\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.createUserWithEmailAndPassword(email, password);\n    yield put(signUpSuccess({\n      user,\n      additionalData: {\n        displayName\n      }\n    }));\n  } catch (error) {\n    yield put(signUpFailure(error));\n  }\n} //watcer\n\nexport function* onSignUpStart() {\n  yield takeLatest(UserActionTypes.SIGN_UP_START, signUp);\n} //////SIGN IN, AFTER SIGN UP///////\n\nexport function* signInAfterSignUp({\n  payload: {\n    user,\n    additionalData\n  }\n}) {\n  yield getSnapshotFromUserAuth(user, additionalData);\n} //watcher\n\nexport function* onSignUpSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInAfterSignUp);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession), call(onSignOutStart), call(onSignUpStart), call(onSignUpSuccess)]);\n}","map":{"version":3,"sources":["/Users/nicolegibson/TrainingRepos/clothing-ecomm/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","auth","googleProvider","createUserProfileDocument","getCurrentUser","signInSuccess","signInFailure","signOutSuccess","signOutFailure","signUpSuccess","signUpFailure","emailSignInStart","UserActionTypes","getSnapshotFromUserAuth","userAuth","additionalData","userRef","userSnapshot","get","id","data","error","signInWithGoogle","user","signInWithPopup","onGoogleSignInStart","GOOGLE_SIGN_IN_START","signInWithEmail","payload","email","password","signInWithEmailAndPassword","onEmailSignInStart","EMAIL_SIGN_IN_START","isUserAuthenticaed","onCheckUserSession","CHECK_USER_SESSION","signOut","onSignOutStart","SIGN_OUT_START","signUp","displayName","createUserWithEmailAndPassword","onSignUpStart","SIGN_UP_START","signInAfterSignUp","onSignUpSuccess","SIGN_UP_SUCCESS","userSagas"],"mappings":"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","sourcesContent":["import { takeLatest, put, all, call } from 'redux-saga/effects';\n\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\nimport { signInSuccess, signInFailure, signOutSuccess, signOutFailure, signUpSuccess, signUpFailure, emailSignInStart } from './user.actions'\nimport UserActionTypes from './user.types';\n\n//signin function\nexport function* getSnapshotFromUserAuth(userAuth, additionalData){\n    try{\n    const userRef = yield call(createUserProfileDocument, userAuth, additionalData);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess(\n      {id: userSnapshot.id, ...userSnapshot.data()})\n    );\n  }catch(error){\n    yield put(signInFailure(error));\n  }\n}\n\n///////GOOGLE SIGNIN///////\n//worker\nexport function* signInWithGoogle(){\n  try{\n    //need to access valu returned\n    const { user } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  }catch(error){\n    yield put(signInFailure(error));\n  }\n}\n\n//watcher\nexport function* onGoogleSignInStart(){\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\n\n\n////////////EMAIL SIGNIN////////////\n//worker\nexport function* signInWithEmail({payload: {email, password}}){\n  try{\n    const { user } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  }catch(error){\n    yield put(signInFailure(error));\n  }\n}\n\n//watcher\nexport function* onEmailSignInStart(){\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\n\n\n/////////CHECK USER Session//////////\n//worker\nexport function* isUserAuthenticaed(){\n  try{\n    const userAuth = yield getCurrentUser();\n    if(!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  }catch(error){\n    yield put(signInFailure(error));\n  }\n}\n\n//watcher\nexport function* onCheckUserSession(){\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticaed);\n}\n\n\n////////SIGNOUT///////////\n\n//worker\nexport function* signOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure(error));\n  }\n}\n\n\n//watcher\nexport function* onSignOutStart(){\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut)\n}\n\n/////SIGN UP///////\n\n//worker\nexport function* signUp({payload: {email, password, displayName}}){\n  try{\n    const{ user } = yield auth.createUserWithEmailAndPassword(email, password);\n    yield put(signUpSuccess({user, additionalData:{displayName}}));\n  }catch(error){\n    yield put(signUpFailure(error));\n  }\n}\n\n//watcer\nexport function* onSignUpStart(){\n  yield takeLatest(UserActionTypes.SIGN_UP_START, signUp);\n}\n\n//////SIGN IN, AFTER SIGN UP///////\n\nexport function* signInAfterSignUp({payload: {user, additionalData}}){\n    yield getSnapshotFromUserAuth(user, additionalData);\n}\n\n//watcher\nexport function* onSignUpSuccess(){\n  yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInAfterSignUp);\n}\n\nexport function* userSagas(){\n  yield all([\n    call(onGoogleSignInStart), \n    call(onEmailSignInStart), \n    call(onCheckUserSession), \n    call(onSignOutStart),\n    call(onSignUpStart),\n    call(onSignUpSuccess)\n  ]);\n}"]},"metadata":{},"sourceType":"module"}