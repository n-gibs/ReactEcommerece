{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\nimport { signInSuccess, signInFailure, signOutSuccess, signOutFailure } from './user.actions';\nimport UserActionTypes from './user.types'; //signin function\n\nexport function* getSnapshotFromUserAuth(userAuth, additionalData) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth, additionalData);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n} ///////GOOGLE SIGNIN///////\n//worker\n\nexport function* signInWithGoogle() {\n  try {\n    //need to access valu returned\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n} //watcher\n\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n} ////////////EMAIL SIGNIN////////////\n//worker\n\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n} //watcher\n\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n} /////////CHECK USER Session//////////\n//worker\n\nexport function* isUserAuthenticaed() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n} //watcher\n\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticaed);\n} ////////SIGNOUT///////////\n//worker\n\nexport function* signOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure(error));\n  }\n} //watcher\n\nexport function* onSignOutStart() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession), call(onSignOutStart)]);\n}","map":{"version":3,"sources":["/Users/nicolegibson/TrainingRepos/clothing-ecomm/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","auth","googleProvider","createUserProfileDocument","getCurrentUser","signInSuccess","signInFailure","signOutSuccess","signOutFailure","UserActionTypes","getSnapshotFromUserAuth","userAuth","additionalData","userRef","userSnapshot","get","id","data","error","signInWithGoogle","user","signInWithPopup","onGoogleSignInStart","GOOGLE_SIGN_IN_START","signInWithEmail","payload","email","password","signInWithEmailAndPassword","onEmailSignInStart","EMAIL_SIGN_IN_START","isUserAuthenticaed","onCheckUserSession","CHECK_USER_SESSION","signOut","onSignOutStart","SIGN_OUT_START","userSagas"],"mappings":"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","sourcesContent":["import { takeLatest, put, all, call } from 'redux-saga/effects';\n\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\nimport { signInSuccess, signInFailure, signOutSuccess, signOutFailure } from './user.actions'\nimport UserActionTypes from './user.types';\n\n//signin function\nexport function* getSnapshotFromUserAuth(userAuth, additionalData){\n    try{\n    const userRef = yield call(createUserProfileDocument, userAuth, additionalData);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess(\n      {id: userSnapshot.id, ...userSnapshot.data()})\n    );\n  }catch(error){\n    yield put(signInFailure(error));\n  }\n}\n\n///////GOOGLE SIGNIN///////\n//worker\nexport function* signInWithGoogle(){\n  try{\n    //need to access valu returned\n    const { user } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  }catch(error){\n    yield put(signInFailure(error));\n  }\n}\n\n//watcher\nexport function* onGoogleSignInStart(){\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\n\n\n////////////EMAIL SIGNIN////////////\n//worker\nexport function* signInWithEmail({payload: {email, password}}){\n  try{\n    const { user } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  }catch(error){\n    yield put(signInFailure(error));\n  }\n}\n\n//watcher\nexport function* onEmailSignInStart(){\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\n\n\n/////////CHECK USER Session//////////\n//worker\nexport function* isUserAuthenticaed(){\n  try{\n    const userAuth = yield getCurrentUser();\n    if(!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  }catch(error){\n    yield put(signInFailure(error));\n  }\n}\n\n//watcher\nexport function* onCheckUserSession(){\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticaed);\n}\n\n\n////////SIGNOUT///////////\n\n//worker\nexport function* signOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure(error));\n  }\n}\n\n\n//watcher\nexport function* onSignOutStart(){\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut)\n}\n\n\nexport function* userSagas(){\n  yield all([\n    call(onGoogleSignInStart), \n    call(onEmailSignInStart), \n    call(onCheckUserSession), \n    call(onSignOutStart)\n  ]);\n}"]},"metadata":{},"sourceType":"module"}